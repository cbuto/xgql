{{ reserveImport "context" }}
{{ reserveImport "time" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/upbound/xgql/internal/graph/extensions/live_query/runtime" }}

func (ec *executionContext) __resolve_liveQuery(ctx context.Context, throttle *int) (<-chan graphql.Marshaler, error) {
	out := make(chan graphql.Marshaler)
	sel := graphql.GetFieldContext(ctx).Field.Selections
	go func() {
		defer close(out)
		lqx, needsRefresh := runtime.WithLiveQuery(ctx)
		// resolve once with live query context.
		out <- ec._Query(lqx, sel)
		d := 200 * time.Millisecond
		if throttle != nil && *throttle > 0 {
			d = time.Duration(*throttle) * time.Millisecond
		}
		throttle := time.NewTicker(d)
		defer throttle.Stop()
		for {
			select {
			case <-throttle.C:
				if needsRefresh() {
					lqx := graphql.WithFreshResponseContext(ctx)
					out <- ec._Query(lqx, sel)
					for _, err := range graphql.GetErrors(lqx) {
						graphql.AddError(ctx, err)
					}
				}
				throttle.Reset(d)
			case <-ctx.Done():
				return
			}
		}
	}()
	return out, nil
}
